[{"/Users/apple/opensource/bank-frontend/bank-frontend/src/App.js":"1","/Users/apple/opensource/bank-frontend/bank-frontend/src/comp/tableData/TableData.js":"2","/Users/apple/opensource/bank-frontend/bank-frontend/src/reportWebVitals.js":"3","/Users/apple/opensource/bank-frontend/bank-frontend/src/index.js":"4"},{"size":245,"mtime":1611512050773,"results":"5","hashOfConfig":"6"},{"size":8941,"mtime":1611599556941,"results":"7","hashOfConfig":"6"},{"size":362,"mtime":1611504816378,"results":"8","hashOfConfig":"6"},{"size":500,"mtime":1611504816376,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12"},"674lte",{"filePath":"13","messages":"14","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"/Users/apple/opensource/bank-frontend/bank-frontend/src/App.js",["21"],"import logo from './logo.svg';\nimport './App.css';\nimport TableData from './comp/tableData/TableData';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Bank Branches</h1>\n      <TableData/>\n    </div>\n  );\n}\n\nexport default App;\n","/Users/apple/opensource/bank-frontend/bank-frontend/src/comp/tableData/TableData.js",["22","23","24","25","26","27","28"],"import React, { useState, useEffect, useRef } from 'react';\nimport { throttle } from 'lodash';\nimport { makeStyles } from '@material-ui/core/styles';\nimport axios from 'axios';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport TextField from '@material-ui/core/TextField';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Favorite from '@material-ui/icons/Favorite';\nimport FavoriteBorder from '@material-ui/icons/FavoriteBorder';\nimport Button from '@material-ui/core/Button';\n\n\nconst columns = [\n    { id: 'bank_name', label: 'Bank Name', align: 'center', },\n    { id: 'ifsc', label: 'IFSC Code', align: 'center', },\n    {\n        id: 'branch',\n        label: 'Branch',\n        minWidth: 170,\n        align: 'center',\n    },\n    {\n        id: 'address',\n        label: 'Address',\n        minWidth: 170,\n        align: 'center',\n    },\n    {\n        id: 'city',\n        label: 'City',\n        minWidth: 170,\n        align: 'center',\n    },\n    {\n        id: 'district',\n        label: 'District',\n        minWidth: 170,\n        align: 'center',\n    },\n    {\n        id: 'state',\n        label: 'State',\n        minWidth: 170,\n        align: 'center',\n    },\n];\n\nconst cities = [\n    {\n        value: 'Bangalore',\n        label: 'Bangalore',\n    },\n    {\n        value: 'Mumbai',\n        label: 'Mumbai',\n    },\n    {\n        value: 'Delhi',\n        label: 'Delhi',\n    },\n    {\n        value: 'Kolkata',\n        label: 'Kolkata',\n    },\n    {\n        value: 'Chennai',\n        label: 'Chennai',\n    },\n];\n\n\n\nlet fav = []\nexport default function TableData() {\n    const classes = useStyles();\n    const [page, setPage] = useState(0);\n    const [rowsPerPage, setRowsPerPage] = useState(10);\n    const [city, setCity] = useState('');\n    const [search, setsearch] = useState('')\n    const [rows, setrows] = useState([])\n    const [favourites, setFavourites] = useState([])\n    // const [value,setValue]=useState({})\n    const [show, setShow] = useState(false)\n    useEffect(() => {\n        getAllData()\n    }, [search])\n\n\n    const getAllData = () => {\n        axios.get(`https://bankserver.herokuapp.com/api/branches?q=${search}`).then((res) => {\n            setrows(res.data.results)\n        })\n    }\n\n\n    const handleChange = (event) => {\n        setsearch(event.target.value)\n        setCity(event.target.value)\n    };\n\n    const handleSearch = (e) => {\n        setsearch(e.target.value)\n    }\n\n    const handleChangePage = (event, newPage) => {\n        setPage(newPage);\n    };\n\n    const handleChangeRowsPerPage = (event) => {\n        setRowsPerPage(+event.target.value);\n        setPage(0);\n    };\n\n\n    const handleFavouritesBank = (e) => {     \n        let favrows = rows.filter(obj => {\n            return obj.ifsc === e.target.name\n        })\n        console.log(favrows)\n        if (fav.includes(favrows[0])) {\n            console.log('ok')\n            console.log(favrows[0].ifsc)\n            fav=fav.filter(obj => {\n                return obj.ifsc !== favrows[0].ifsc;\n            })\n        }\n        else {\n            console.log('not-ok')\n            fav.push(favrows[0])\n        }\n        localStorage.setItem('favourites', JSON.stringify(fav))\n        console.log(fav)\n    }\n\n\n    // const handleFavouritesBank=(event)=>{\n    //     let index=event.target.name\n    //     if(value[index]===undefined){\n    //         setValue({...value,[index]:true})\n    //         console.log(\"1\")\n\n    //     }\n    //     else{\n    //         let v=value[index]\n    //         setValue({...value,[index]:!v})\n    //         console.log(\"2\")\n\n    //     }\n\n    //     favouriteList(index)\n    //     console.log(value)\n\n\n\n    // }\n\n    // const favouriteList=(index)=>{\n\n    //     if(!value[index]){\n    //         setFavourites([...favourites,rows[index]])\n    //     }\n    //     else{\n    //         favourites.splice(index,1)\n    //         setFavourites(favourites)\n    //     }\n\n    //     // console.log(favourites)\n\n\n    // }\n    const showfavouritedBank = () => {\n        \n        let favouritesbank = localStorage.getItem(\"favourites\")\n        setrows(JSON.parse(favouritesbank))\n    }\n\n\n\n    return (\n        <Paper className={classes.root}>\n            <div className={classes.searchBar} >\n                <TextField\n                    id=\"standard-select-currency\"\n                    select\n                    label=\"Bank\"\n                    value={city}\n                    onChange={handleChange}\n                    variant=\"outlined\"\n                    helperText=\"Please select your bank city\"\n                >\n                    {cities.map((option) => (\n                        <MenuItem key={option.value} value={option.value}>\n                            {option.label}\n                        </MenuItem>\n                    ))}\n                </TextField>\n                <Button variant=\"contained\" color=\"primary\" onClick={showfavouritedBank}>\n                    Favourites bank\n                </Button>\n                <TextField id=\"standard-basic\" onChange={handleSearch} label=\"Search\" />\n\n            </div>\n            <TableContainer className={classes.container}>\n                <Table stickyHeader aria-label=\"sticky table\">\n                    <TableHead  >\n                        <TableRow className={classes.head} >\n                            <TableCell align='center' >\n                                S.No.\n                            </TableCell>\n                            <TableCell align='center' >\n                                favorites\n                            </TableCell>\n                            {columns.map((column) => (\n                                <TableCell\n                                    key={column.id}\n                                    align={column.align}\n                                    style={{ minWidth: column.minWidth }}\n\n                                >\n                                    {column.label}\n                                </TableCell>\n                            ))}\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {rows?.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row, index) => {\n                            return (\n                                <TableRow hover role=\"checkbox\" tabIndex={-1} key={index + 1}>\n                                    <TableCell key={index + 1} align='center' >\n                                        {index + 1}\n                                    </TableCell>\n                                    <TableCell align='center'  >\n                                        <FormControlLabel\n                                            control={<Checkbox icon={<FavoriteBorder />} checkedIcon={<Favorite />} />}\n                                            onChange={handleFavouritesBank}\n                                            key={index}\n                                            name={row[\"ifsc\"]}\n                                        />\n                                    </TableCell>\n                                    {columns.map((column) => {\n                                        const value = row[column.id];\n                                        return (\n                                            <TableCell key={column.id} align={column.align}>\n                                                {column.format && typeof value === 'number' ? column.format(value) : value}\n                                            </TableCell>\n                                        );\n                                    })}\n                                </TableRow>\n                            );\n                        })}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n            <TablePagination\n                rowsPerPageOptions={[10, 25, 50, 100]}\n                component=\"div\"\n                count={rows.length}\n                rowsPerPage={rowsPerPage}\n                page={page}\n                onChangePage={handleChangePage}\n                onChangeRowsPerPage={handleChangeRowsPerPage}\n            />\n        </Paper>\n    );\n}\n\nconst useStyles = makeStyles({\n    root: {\n        width: '100%',\n    },\n    container: {\n        maxHeight: 440,\n    },\n    searchBar: {\n        display: 'flex',\n        justifyContent: 'space-between',\n        padding: 20\n    },\n    head: {\n        fontWeight: 'bold',\n    }\n})","/Users/apple/opensource/bank-frontend/bank-frontend/src/reportWebVitals.js",[],"/Users/apple/opensource/bank-frontend/bank-frontend/src/index.js",[],["29","30"],{"ruleId":"31","severity":1,"message":"32","line":1,"column":8,"nodeType":"33","messageId":"34","endLine":1,"endColumn":12},{"ruleId":"31","severity":1,"message":"35","line":1,"column":38,"nodeType":"33","messageId":"34","endLine":1,"endColumn":44},{"ruleId":"31","severity":1,"message":"36","line":2,"column":10,"nodeType":"33","messageId":"34","endLine":2,"endColumn":18},{"ruleId":"31","severity":1,"message":"37","line":90,"column":12,"nodeType":"33","messageId":"34","endLine":90,"endColumn":22},{"ruleId":"31","severity":1,"message":"38","line":90,"column":24,"nodeType":"33","messageId":"34","endLine":90,"endColumn":37},{"ruleId":"31","severity":1,"message":"39","line":92,"column":12,"nodeType":"33","messageId":"34","endLine":92,"endColumn":16},{"ruleId":"31","severity":1,"message":"40","line":92,"column":18,"nodeType":"33","messageId":"34","endLine":92,"endColumn":25},{"ruleId":"41","severity":1,"message":"42","line":95,"column":8,"nodeType":"43","endLine":95,"endColumn":16,"suggestions":"44"},{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","replacedBy":"48"},"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'useRef' is defined but never used.","'throttle' is defined but never used.","'favourites' is assigned a value but never used.","'setFavourites' is assigned a value but never used.","'show' is assigned a value but never used.","'setShow' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getAllData'. Either include it or remove the dependency array.","ArrayExpression",["49"],"no-native-reassign",["50"],"no-negated-in-lhs",["51"],{"desc":"52","fix":"53"},"no-global-assign","no-unsafe-negation","Update the dependencies array to be: [getAllData, search]",{"range":"54","text":"55"},[2520,2528],"[getAllData, search]"]